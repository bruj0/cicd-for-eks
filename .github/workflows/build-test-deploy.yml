name: Build Test and Deploy

on:
  release:
    types: [published]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ping-pong

jobs:
  test:
    uses: ./.github/workflows/validate.yml

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      pull-requests: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate tags and labels
      id: meta
      run: |
        # Convert repository name to lowercase
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')

        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Release build - use the release tag
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION=$(echo "${RELEASE_TAG}" | sed 's/^v//')
          TAGS="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${VERSION}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:latest"
          echo "Building release version: ${VERSION}"
          BUILD_TYPE="release"
          BRANCH_CLEAN=""
        else
          # Pull request build - use PR number and branch name
          BRANCH_NAME="${{ github.head_ref }}"
          PR_NUMBER="${{ github.event.number }}"
          # Sanitize branch name and limit to 8 characters
          BRANCH_CLEAN=$(echo "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-8)
          # Use current timestamp as version for PR builds
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION="pr-${PR_NUMBER}-${TIMESTAMP}"
          TAGS="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${VERSION}"
          # Also tag with branch name for easier identification
          TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${BRANCH_CLEAN}-latest"
          echo "Building PR version: ${VERSION}"
          BUILD_TYPE="development"
        fi

        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image-name=${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT
        echo "build-type=${BUILD_TYPE}" >> $GITHUB_OUTPUT
        echo "branch-clean=${BRANCH_CLEAN}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=Ping-Pong Flask App
          org.opencontainers.image.description=A simple Flask application for CI/CD testing
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.created=${{ github.event_name == 'release' && github.event.release.created_at || github.event.pull_request.created_at }}
          build.type=${{ steps.meta.outputs.build-type }}
          build.branch=${{ steps.meta.outputs.branch-clean }}
          ${{ github.event_name == 'release' && format('release.tag={0}', github.event.release.tag_name) || format('pr.number={0}', github.event.number) }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Output image details
      run: |
        echo "Docker image built and pushed successfully!"
        echo "Image: ${{ steps.meta.outputs.image-name }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Version: ${{ steps.meta.outputs.version }}"
        echo "Build Type: ${{ steps.meta.outputs.build-type }}"
        echo "Triggered by: ${{ github.event_name }}"

        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "Released to production from GitHub Release: ${{ github.event.release.tag_name }}"
        else
          echo "Built for PR #${{ github.event.number }} from branch: ${{ github.head_ref }}"
        fi

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Docker Image Built

            **Image:** \`${{ steps.meta.outputs.image-name }}\`
            **Version:** \`${{ steps.meta.outputs.version }}\`
            **Registry:** \`${{ env.REGISTRY }}\`
            **Branch:** \`${{ github.head_ref }}\`
            **PR:** \`#${{ github.event.number }}\`

            Pull the image:
            \`\`\`bash
            docker pull ${{ steps.meta.outputs.tags }}
            \`\`\`

            Deploy with Helm:
            \`\`\`bash
            helm upgrade --install ping-pong ./helm-charts/ping-pong \\
              --set image.repository=${{ steps.meta.outputs.image-name }} \\
              --set image.tag=${{ steps.meta.outputs.version }}
            \`\`\`
            `
          })

    - name: Summary
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ steps.meta.outputs.image-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** \`${{ steps.meta.outputs.build-type }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "**GitHub Release:** \`${{ github.event.release.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Pull Request:** \`#${{ github.event.number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ steps.meta.outputs.build-type }}" == "release" ]]; then
          echo "**Production Release** - Image available for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**PR Build** - Image available for testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### PR Testing" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
