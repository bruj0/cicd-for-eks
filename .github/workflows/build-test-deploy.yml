name: Build Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ping-pong

jobs:
  test:
    uses: ./.github/workflows/validate.yml

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      pull-requests: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for semantic versioning

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml

    - name: Generate tags and labels
      id: meta
      run: |
        # Convert repository name to lowercase
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch - release build
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          TAGS="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${VERSION}-release"
          TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:latest"
          echo "Building release version: ${VERSION}-release"
          BUILD_TYPE="release"
        else
          # PR build - branch build
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          # Sanitize branch name and limit to 8 characters
          BRANCH_CLEAN=$(echo "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-8)
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          TAGS="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${VERSION}-${BRANCH_CLEAN}"
          echo "Building branch version: ${VERSION}-${BRANCH_CLEAN}"
          BUILD_TYPE="development"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image-name=${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT
        echo "build-type=${BUILD_TYPE}" >> $GITHUB_OUTPUT
        echo "branch-clean=${BRANCH_CLEAN}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=Ping-Pong Flask App
          org.opencontainers.image.description=A simple Flask application for CI/CD testing
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.created=${{ steps.gitversion.outputs.commitDate }}
          build.type=${{ steps.meta.outputs.build-type }}
          build.branch=${{ steps.meta.outputs.branch-clean }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Output image details
      run: |
        echo "Docker image built and pushed successfully!"
        echo "Image: ${{ steps.meta.outputs.image-name }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Version: ${{ steps.meta.outputs.version }}"
        echo "Build Type: ${{ steps.meta.outputs.build-type }}"
        echo "Triggered by: ${{ github.event_name }}"
        
        if [[ "${{ steps.meta.outputs.build-type }}" == "release" ]]; then
          echo "Released to production with -release suffix"
        else
          echo "Built for development/testing with branch suffix: ${{ steps.meta.outputs.branch-clean }}"
        fi

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Docker Image Built
            
            **Image:** \`${{ steps.meta.outputs.image-name }}\`
            **Version:** \`${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.branch-clean }}\`
            **Registry:** \`${{ env.REGISTRY }}\`
            
            Pull the image:
            \`\`\`bash
            docker pull ${{ steps.meta.outputs.tags }}
            \`\`\`
            
            Deploy with Helm:
            \`\`\`bash
            helm upgrade --install ping-pong ./helm-charts/ping-pong \\
              --set image.repository=${{ steps.meta.outputs.image-name }} \\
              --set image.tag=${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.branch-clean }}
            \`\`\`
            `
          })

    - name: Summary
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ steps.meta.outputs.image-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** \`${{ steps.meta.outputs.build-type }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "**Test Status:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.meta.outputs.build-type }}" == "release" ]]; then
          echo "**Release Build** - Image available for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Development Build** - Image available for testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Development Testing" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
